{"abi":[{"type":"function","name":"activeSessionId","inputs":[],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"adapters","inputs":[{"name":"id","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"disputeMessageRecovery","inputs":[{"name":"adapter","type":"address","internalType":"address"},{"name":"messageHash","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"estimate","inputs":[{"name":"payload","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"perAdapter","type":"uint256[]","internalType":"uint256[]"},{"name":"total","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"executeMessageRecovery","inputs":[{"name":"adapter","type":"address","internalType":"address"},{"name":"message","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"file","inputs":[{"name":"what","type":"bytes32","internalType":"bytes32"},{"name":"caller","type":"address","internalType":"address"},{"name":"isAllower","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"file","inputs":[{"name":"what","type":"bytes32","internalType":"bytes32"},{"name":"value","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"file","inputs":[{"name":"what","type":"bytes32","internalType":"bytes32"},{"name":"data","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"file","inputs":[{"name":"what","type":"bytes32","internalType":"bytes32"},{"name":"data1","type":"uint8","internalType":"uint8"},{"name":"data2","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"handle","inputs":[{"name":"payload","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"messageHandlers","inputs":[{"name":"messageId","type":"uint8","internalType":"uint8"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"payers","inputs":[{"name":"caller","type":"address","internalType":"address"}],"outputs":[{"name":"isAllowed","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"quorum","inputs":[],"outputs":[{"name":"","type":"uint8","internalType":"uint8"}],"stateMutability":"view"},{"type":"function","name":"recoveries","inputs":[{"name":"adapter","type":"address","internalType":"address"},{"name":"messageHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"timestamp","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"send","inputs":[{"name":"message","type":"bytes","internalType":"bytes"},{"name":"source","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"topUp","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"votes","inputs":[{"name":"messageHash","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint16[8]","internalType":"uint16[8]"}],"stateMutability":"view"},{"type":"event","name":"DisputeMessageRecovery","inputs":[{"name":"messageHash","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"adapter","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ExecuteMessage","inputs":[{"name":"message","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"adapter","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ExecuteMessageRecovery","inputs":[{"name":"message","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"adapter","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"File","inputs":[{"name":"what","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"adapters","type":"address[]","indexed":false,"internalType":"address[]"}],"anonymous":false},{"type":"event","name":"File","inputs":[{"name":"what","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"instance","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"File","inputs":[{"name":"what","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"messageId","type":"uint8","indexed":false,"internalType":"uint8"},{"name":"manager","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"File","inputs":[{"name":"what","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"caller","type":"address","indexed":false,"internalType":"address"},{"name":"isAllowed","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false},{"type":"event","name":"InitiateMessageRecovery","inputs":[{"name":"messageHash","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"adapter","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ProcessMessage","inputs":[{"name":"message","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"adapter","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ProcessProof","inputs":[{"name":"messageHash","type":"bytes32","indexed":false,"internalType":"bytes32"},{"name":"adapter","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ReceiveNativeTokens","inputs":[{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"amount","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"RecoverMessage","inputs":[{"name":"adapter","type":"address","indexed":false,"internalType":"address"},{"name":"message","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"event","name":"RecoverProof","inputs":[{"name":"adapter","type":"address","indexed":false,"internalType":"address"},{"name":"messageHash","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"SendMessage","inputs":[{"name":"message","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"activeSessionId()":"9ef729c5","adapters(uint256)":"4ef501ac","disputeMessageRecovery(address,bytes32)":"1a3355a4","estimate(bytes)":"e766cc12","executeMessageRecovery(address,bytes)":"361081b5","file(bytes32,address)":"d4e8be83","file(bytes32,address,bool)":"167da1c2","file(bytes32,address[])":"7aa21e28","file(bytes32,uint8,address)":"f7ba64e3","handle(bytes)":"bf48bcb6","messageHandlers(uint8)":"bc8d601f","payers(address)":"4a714c24","quorum()":"1703a018","recoveries(address,bytes32)":"e7bb75cd","send(bytes,address)":"202d45d3","topUp()":"dc29f1de","votes(bytes32)":"2b38cd96"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"DisputeMessageRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ExecuteMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ExecuteMessageRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"messageId\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"InitiateMessageRecovery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ProcessMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"}],\"name\":\"ProcessProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ReceiveNativeTokens\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"RecoverMessage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"RecoverProof\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"SendMessage\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"activeSessionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"disputeMessageRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"estimate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"perAdapter\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"executeMessageRecovery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAllower\",\"type\":\"bool\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"data1\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"data2\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"messageId\",\"type\":\"uint8\"}],\"name\":\"messageHandlers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"payers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isAllowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorum\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adapter\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"recoveries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topUp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint16[8]\",\"name\":\"\",\"type\":\"uint16[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"activeSessionId()\":{\"details\":\"When the adapters are updated with new ones,         each new set of adapters has their own sessionId.         Currently it uses sessionId of the previous set and         increments it by 1. The idea of an activeSessionId is         to invalidate any incoming messages from previously used adapters.\"},\"disputeMessageRecovery(address,bytes32)\":{\"params\":{\"adapter\":\"Adapter that the recovery was targeting\",\"messageHash\":\"Hash of the message being disputed\"}},\"estimate(bytes)\":{\"details\":\"Currenly the payload is not taken into consideration.\",\"params\":{\"payload\":\"Used in gas cost calculations.\"},\"returns\":{\"perAdapter\":\"An array of cost values per adapter. Each value is how much it's going to cost         for a message / proof to be passed through one router and executed on Centrifuge Chain\",\"total\":\"Total cost for sending one message and corresponding proofs on through all adapters\"}},\"executeMessageRecovery(address,bytes)\":{\"params\":{\"adapter\":\"Adapter's address that the recovery is targeting\",\"message\":\"Hash of the message to be recovered\"}},\"file(bytes32,address)\":{\"details\":\"Currently used to update addresses of contract instances.\",\"params\":{\"data\":\"New address.\",\"what\":\"The name of the variable to be updated.\"}},\"file(bytes32,address,bool)\":{\"details\":\"Manages who is allowed to call `this.topUp`\",\"params\":{\"caller\":\"Address of the payer allowed to top-up\",\"isAllower\":\"Whether the `caller` is allowed to top-up or not\",\"what\":\"The name of the variable to be updated - `payers`\"}},\"file(bytes32,address[])\":{\"details\":\"Currently it is used to update the supported adapters.\",\"params\":{\"value\":\"New addresses.\",\"what\":\"The name of the variable to be updated.\"}},\"file(bytes32,uint8,address)\":{\"details\":\"Currently used to update any custom handlers for a specific message type.         data1 is the message id from MessagesLib.Call and data2 could be any         custom instance of a contract that will handle that call.\",\"params\":{\"data1\":\"The key of the mapping.\",\"data2\":\"The value of the mapping\",\"what\":\"The name of the variable to be updated.\"}},\"handle(bytes)\":{\"details\":\"Assumes adapters ensure messages cannot be confirmed more than once.\",\"params\":{\"payload\":\"Incoming message from the Centrifuge Chain passed through adapters.\"}},\"payers(address)\":{\"params\":{\"caller\":\"Address to check\"},\"returns\":{\"isAllowed\":\"Whether the `caller` `isAllowed to call `this.topUp()`\"}},\"quorum()\":{\"details\":\"Quorum shows the amount of votes needed in order for a message to be dispatched further.         The quorum is taken from the first adapter.         Current quorum is the amount of all adapters. return  Needed amount\"},\"send(bytes,address)\":{\"details\":\"Sends 1 message to the first adapter with the full message,         and n-1 messages to the other adapters with proofs (hash of message).         This ensures message uniqueness (can only be executed on the destination once).         Source could be either Centrifuge router or EoA or any contract         that calls the ERC7540Vault contract directly.\",\"params\":{\"message\":\"Message to be send. Either the message itself or a hash value of it ( proof ).\",\"source\":\"Entry point of the transaction.         Used to determine whether it is eligible for TX cost payment.\"}},\"topUp()\":{\"details\":\"It can be called only through endorsed contracts.         Currently being called from Centrifuge Router only.         In order to prepay, the method MUST be called with `msg.value`.         Called is assumed to have called IGateway.estimate before calling this.\"},\"votes(bytes32)\":{\"details\":\"It supports parallel messages ( duplicates ). That means that the incoming messages could be         the result of two or more independ request from the user of the same type.         i.e. Same user would like to deposit same underlying asset with the same amount more then once.\",\"params\":{\"messageHash\":\"The hash value of the incoming message.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activeSessionId()\":{\"notice\":\"Gets the current active routers session id.\"},\"adapters(uint256)\":{\"notice\":\"Returns the address of the adapter at the given id.\"},\"disputeMessageRecovery(address,bytes32)\":{\"notice\":\"Governance on Centrifuge Chain can initiate message recovery. After the challenge period,         the recovery can be executed. If a malign adapter initiates message recovery, governance on         Centrifuge Chain can dispute and immediately cancel the recovery, using any other valid adapter.\"},\"estimate(bytes)\":{\"notice\":\"Used to calculate overall cost for bridging a payload on the first adapter and settling         on the destination chain and bridging its payload proofs on n-1 adapter         and settling on the destination chain.\"},\"executeMessageRecovery(address,bytes)\":{\"notice\":\"Governance on Centrifuge Chain can initiate message recovery. After the challenge period,         the recovery can be executed. If a malign adapter initiates message recovery, governance on         Centrifuge Chain can dispute and immediately cancel the recovery, using any other valid adapter.         Only 1 recovery can be outstanding per message hash. If multiple adapters fail at the same time,         these will need to be recovered serially (increasing the challenge period for each failed adapter).\"},\"file(bytes32,address)\":{\"notice\":\"Used to update an address ( state variable ) on very rare occasions.\"},\"file(bytes32,address,bool)\":{\"notice\":\"Used to update a mapping ( state variables ) on very rare occasions.\"},\"file(bytes32,address[])\":{\"notice\":\"Used to update an array of addresses ( state variable ) on very rare occasions.\"},\"file(bytes32,uint8,address)\":{\"notice\":\"Used to update a mapping ( state variables ) on very rare occasions.\"},\"handle(bytes)\":{\"notice\":\"Handles incoming messages, proofs, and recoveries.\"},\"messageHandlers(uint8)\":{\"notice\":\"Returns the address of the contract that handles the given message id.\"},\"payers(address)\":{\"notice\":\"Used to check current state of the `caller` and whether they are allowed to call         `this.topUp` or not.\"},\"quorum()\":{\"notice\":\"A view method of the current quorum.abi\"},\"recoveries(address,bytes32)\":{\"notice\":\"Returns the timestamp when the given recovery can be executed.\"},\"send(bytes,address)\":{\"notice\":\"Sends outgoing messages to the Centrifuge Chain.\"},\"topUp()\":{\"notice\":\"Prepays for the TX cost for sending through the adapters         and Centrifuge Chain\"},\"votes(bytes32)\":{\"notice\":\"Counts how many times each incoming messages has been received per adapter.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Zybra/interfaces/gateway/IGateway.sol\":\"IGateway\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[\":@arbitrum/=node_modules/@arbitrum/\",\":@chainlink/=node_modules/@chainlink/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@layerzerolabs/=node_modules/@layerzerolabs/\",\":@offchainlabs/=node_modules/@offchainlabs/\",\":@openzeppelin-3/=node_modules/@openzeppelin-3/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@scroll-tech/=node_modules/@scroll-tech/\",\":@uniswap/=node_modules/@uniswap/\",\":ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a/=node_modules/erc721a/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/\"],\"viaIR\":true},\"sources\":{\"contracts/Zybra/interfaces/gateway/IGateway.sol\":{\"keccak256\":\"0xd751516757941c6b081337b777f0df2c779e05cac24ade31bec1fcefd0dcc78f\",\"license\":\"AGPL-3.0-only\",\"urls\":[\"bzz-raw://950a413a1cca89f7b13e9a5c70c01a5a4c6a9679617d3b81853c7da6f8d952af\",\"dweb:/ipfs/QmVGsyoFyQkJGzVvJxJvB7GobUnj5sTwHBsZRWKtPuWttR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.26+commit.8a97fa7a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":false},{"internalType":"address","name":"adapter","type":"address","indexed":false}],"type":"event","name":"DisputeMessageRecovery","anonymous":false},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes","indexed":false},{"internalType":"address","name":"adapter","type":"address","indexed":false}],"type":"event","name":"ExecuteMessage","anonymous":false},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes","indexed":false},{"internalType":"address","name":"adapter","type":"address","indexed":false}],"type":"event","name":"ExecuteMessageRecovery","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32","indexed":true},{"internalType":"address[]","name":"adapters","type":"address[]","indexed":false}],"type":"event","name":"File","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32","indexed":true},{"internalType":"address","name":"instance","type":"address","indexed":false}],"type":"event","name":"File","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32","indexed":true},{"internalType":"uint8","name":"messageId","type":"uint8","indexed":false},{"internalType":"address","name":"manager","type":"address","indexed":false}],"type":"event","name":"File","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32","indexed":true},{"internalType":"address","name":"caller","type":"address","indexed":false},{"internalType":"bool","name":"isAllowed","type":"bool","indexed":false}],"type":"event","name":"File","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":false},{"internalType":"address","name":"adapter","type":"address","indexed":false}],"type":"event","name":"InitiateMessageRecovery","anonymous":false},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes","indexed":false},{"internalType":"address","name":"adapter","type":"address","indexed":false}],"type":"event","name":"ProcessMessage","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":false},{"internalType":"address","name":"adapter","type":"address","indexed":false}],"type":"event","name":"ProcessProof","anonymous":false},{"inputs":[{"internalType":"address","name":"sender","type":"address","indexed":true},{"internalType":"uint256","name":"amount","type":"uint256","indexed":false}],"type":"event","name":"ReceiveNativeTokens","anonymous":false},{"inputs":[{"internalType":"address","name":"adapter","type":"address","indexed":false},{"internalType":"bytes","name":"message","type":"bytes","indexed":false}],"type":"event","name":"RecoverMessage","anonymous":false},{"inputs":[{"internalType":"address","name":"adapter","type":"address","indexed":false},{"internalType":"bytes32","name":"messageHash","type":"bytes32","indexed":false}],"type":"event","name":"RecoverProof","anonymous":false},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes","indexed":false}],"type":"event","name":"SendMessage","anonymous":false},{"inputs":[],"stateMutability":"view","type":"function","name":"activeSessionId","outputs":[{"internalType":"uint64","name":"","type":"uint64"}]},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"stateMutability":"view","type":"function","name":"adapters","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"adapter","type":"address"},{"internalType":"bytes32","name":"messageHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function","name":"disputeMessageRecovery"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"stateMutability":"view","type":"function","name":"estimate","outputs":[{"internalType":"uint256[]","name":"perAdapter","type":"uint256[]"},{"internalType":"uint256","name":"total","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"adapter","type":"address"},{"internalType":"bytes","name":"message","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"executeMessageRecovery"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"caller","type":"address"},{"internalType":"bool","name":"isAllower","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"file"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address[]","name":"value","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"file"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"address","name":"data","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"file"},{"inputs":[{"internalType":"bytes32","name":"what","type":"bytes32"},{"internalType":"uint8","name":"data1","type":"uint8"},{"internalType":"address","name":"data2","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"file"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"handle"},{"inputs":[{"internalType":"uint8","name":"messageId","type":"uint8"}],"stateMutability":"view","type":"function","name":"messageHandlers","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"address","name":"caller","type":"address"}],"stateMutability":"view","type":"function","name":"payers","outputs":[{"internalType":"bool","name":"isAllowed","type":"bool"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"quorum","outputs":[{"internalType":"uint8","name":"","type":"uint8"}]},{"inputs":[{"internalType":"address","name":"adapter","type":"address"},{"internalType":"bytes32","name":"messageHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"recoveries","outputs":[{"internalType":"uint256","name":"timestamp","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"message","type":"bytes"},{"internalType":"address","name":"source","type":"address"}],"stateMutability":"payable","type":"function","name":"send"},{"inputs":[],"stateMutability":"payable","type":"function","name":"topUp"},{"inputs":[{"internalType":"bytes32","name":"messageHash","type":"bytes32"}],"stateMutability":"view","type":"function","name":"votes","outputs":[{"internalType":"uint16[8]","name":"","type":"uint16[8]"}]}],"devdoc":{"kind":"dev","methods":{"activeSessionId()":{"details":"When the adapters are updated with new ones,         each new set of adapters has their own sessionId.         Currently it uses sessionId of the previous set and         increments it by 1. The idea of an activeSessionId is         to invalidate any incoming messages from previously used adapters."},"disputeMessageRecovery(address,bytes32)":{"params":{"adapter":"Adapter that the recovery was targeting","messageHash":"Hash of the message being disputed"}},"estimate(bytes)":{"details":"Currenly the payload is not taken into consideration.","params":{"payload":"Used in gas cost calculations."},"returns":{"perAdapter":"An array of cost values per adapter. Each value is how much it's going to cost         for a message / proof to be passed through one router and executed on Centrifuge Chain","total":"Total cost for sending one message and corresponding proofs on through all adapters"}},"executeMessageRecovery(address,bytes)":{"params":{"adapter":"Adapter's address that the recovery is targeting","message":"Hash of the message to be recovered"}},"file(bytes32,address)":{"details":"Currently used to update addresses of contract instances.","params":{"data":"New address.","what":"The name of the variable to be updated."}},"file(bytes32,address,bool)":{"details":"Manages who is allowed to call `this.topUp`","params":{"caller":"Address of the payer allowed to top-up","isAllower":"Whether the `caller` is allowed to top-up or not","what":"The name of the variable to be updated - `payers`"}},"file(bytes32,address[])":{"details":"Currently it is used to update the supported adapters.","params":{"value":"New addresses.","what":"The name of the variable to be updated."}},"file(bytes32,uint8,address)":{"details":"Currently used to update any custom handlers for a specific message type.         data1 is the message id from MessagesLib.Call and data2 could be any         custom instance of a contract that will handle that call.","params":{"data1":"The key of the mapping.","data2":"The value of the mapping","what":"The name of the variable to be updated."}},"handle(bytes)":{"details":"Assumes adapters ensure messages cannot be confirmed more than once.","params":{"payload":"Incoming message from the Centrifuge Chain passed through adapters."}},"payers(address)":{"params":{"caller":"Address to check"},"returns":{"isAllowed":"Whether the `caller` `isAllowed to call `this.topUp()`"}},"quorum()":{"details":"Quorum shows the amount of votes needed in order for a message to be dispatched further.         The quorum is taken from the first adapter.         Current quorum is the amount of all adapters. return  Needed amount"},"send(bytes,address)":{"details":"Sends 1 message to the first adapter with the full message,         and n-1 messages to the other adapters with proofs (hash of message).         This ensures message uniqueness (can only be executed on the destination once).         Source could be either Centrifuge router or EoA or any contract         that calls the ERC7540Vault contract directly.","params":{"message":"Message to be send. Either the message itself or a hash value of it ( proof ).","source":"Entry point of the transaction.         Used to determine whether it is eligible for TX cost payment."}},"topUp()":{"details":"It can be called only through endorsed contracts.         Currently being called from Centrifuge Router only.         In order to prepay, the method MUST be called with `msg.value`.         Called is assumed to have called IGateway.estimate before calling this."},"votes(bytes32)":{"details":"It supports parallel messages ( duplicates ). That means that the incoming messages could be         the result of two or more independ request from the user of the same type.         i.e. Same user would like to deposit same underlying asset with the same amount more then once.","params":{"messageHash":"The hash value of the incoming message."}}},"version":1},"userdoc":{"kind":"user","methods":{"activeSessionId()":{"notice":"Gets the current active routers session id."},"adapters(uint256)":{"notice":"Returns the address of the adapter at the given id."},"disputeMessageRecovery(address,bytes32)":{"notice":"Governance on Centrifuge Chain can initiate message recovery. After the challenge period,         the recovery can be executed. If a malign adapter initiates message recovery, governance on         Centrifuge Chain can dispute and immediately cancel the recovery, using any other valid adapter."},"estimate(bytes)":{"notice":"Used to calculate overall cost for bridging a payload on the first adapter and settling         on the destination chain and bridging its payload proofs on n-1 adapter         and settling on the destination chain."},"executeMessageRecovery(address,bytes)":{"notice":"Governance on Centrifuge Chain can initiate message recovery. After the challenge period,         the recovery can be executed. If a malign adapter initiates message recovery, governance on         Centrifuge Chain can dispute and immediately cancel the recovery, using any other valid adapter.         Only 1 recovery can be outstanding per message hash. If multiple adapters fail at the same time,         these will need to be recovered serially (increasing the challenge period for each failed adapter)."},"file(bytes32,address)":{"notice":"Used to update an address ( state variable ) on very rare occasions."},"file(bytes32,address,bool)":{"notice":"Used to update a mapping ( state variables ) on very rare occasions."},"file(bytes32,address[])":{"notice":"Used to update an array of addresses ( state variable ) on very rare occasions."},"file(bytes32,uint8,address)":{"notice":"Used to update a mapping ( state variables ) on very rare occasions."},"handle(bytes)":{"notice":"Handles incoming messages, proofs, and recoveries."},"messageHandlers(uint8)":{"notice":"Returns the address of the contract that handles the given message id."},"payers(address)":{"notice":"Used to check current state of the `caller` and whether they are allowed to call         `this.topUp` or not."},"quorum()":{"notice":"A view method of the current quorum.abi"},"recoveries(address,bytes32)":{"notice":"Returns the timestamp when the given recovery can be executed."},"send(bytes,address)":{"notice":"Sends outgoing messages to the Centrifuge Chain."},"topUp()":{"notice":"Prepays for the TX cost for sending through the adapters         and Centrifuge Chain"},"votes(bytes32)":{"notice":"Counts how many times each incoming messages has been received per adapter."}},"version":1}},"settings":{"remappings":["@arbitrum/=node_modules/@arbitrum/","@chainlink/=node_modules/@chainlink/","@eth-optimism/=node_modules/@eth-optimism/","@layerzerolabs/=node_modules/@layerzerolabs/","@offchainlabs/=node_modules/@offchainlabs/","@openzeppelin-3/=node_modules/@openzeppelin-3/","@openzeppelin/=node_modules/@openzeppelin/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@scroll-tech/=node_modules/@scroll-tech/","@uniswap/=node_modules/@uniswap/","ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a/=node_modules/erc721a/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/"],"optimizer":{"enabled":true,"runs":100},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/Zybra/interfaces/gateway/IGateway.sol":"IGateway"},"evmVersion":"cancun","libraries":{},"viaIR":true},"sources":{"contracts/Zybra/interfaces/gateway/IGateway.sol":{"keccak256":"0xd751516757941c6b081337b777f0df2c779e05cac24ade31bec1fcefd0dcc78f","urls":["bzz-raw://950a413a1cca89f7b13e9a5c70c01a5a4c6a9679617d3b81853c7da6f8d952af","dweb:/ipfs/QmVGsyoFyQkJGzVvJxJvB7GobUnj5sTwHBsZRWKtPuWttR"],"license":"AGPL-3.0-only"}},"version":1},"id":32}